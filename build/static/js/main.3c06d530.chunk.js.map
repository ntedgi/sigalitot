{"version":3,"sources":["images/migrash.png","components/FilterTable/index.js","components/MorgageData/index.js","components/DataContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","NumberRangeColumnFilter","id","React","useMemo","min","values","max","forEach","row","Math","style","display","type","val","old","parseInt","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","getTableProps","headerGroups","prepareRow","state","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","i","getRowProps","cells","cell","getCellProps","autoRemove","App","Header","accessor","Cell","rowParts","split","href","MorgageData","props","handleChange","setState","years","rate","changeData","this","event","onClick","Component","DataContainer","changeProp","obj","avgReturn","needToTake","ir","np","pv","PMT","toFixed","fv","pmt","pvif","pow","morgageSummary","price","precent","needToBring","returnPerMounth","numberWithCommas","x","toString","replace","prapareData","apartments","yard","building","result","types","typesArray","element","aptype","floor","free_text","rooms","availble","sub_title","myURI","v","file","push","st1","st2","fetch","then","response","JSON","parse","region_name","b","b_title","r","console","log","className","FilterTable","src","migrash","alt","height","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c06d530.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/migrash.440806ec.png\";","import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useFilters } from 'react-table'\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter'\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach(row => {\n            options.add(row.values[id])\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <select\n            value={filterValue}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n        >\n            <option value=\"\">All</option>\n            {options.map((option, i) => (\n                <option key={i} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    // Calculate the min and max\n    // using the preFilteredRows\n\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <>\n            <input\n                type=\"range\"\n                min={min}\n                max={max}\n                value={filterValue || min}\n                onChange={e => {\n                    setFilter(parseInt(e.target.value, 10))\n                }}\n            />\n            <button onClick={() => setFilter(undefined)}>Off</button>\n        </>\n    )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n    column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n            }}\n        >\n            <input\n                value={filterValue[0] || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n                }}\n                placeholder={`Min (${min})`}\n                style={{\n                    width: '70px',\n                    marginRight: '0.5rem',\n                }}\n            />\n            to\n      <input\n                value={filterValue[1] || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n                }}\n                placeholder={`Max (${max})`}\n                style={{\n                    width: '70px',\n                    marginLeft: '0.5rem',\n                }}\n            />\n        </div>\n    )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Our table component\nfunction Table({ columns, data }) {\n    const filterTypes = React.useMemo(\n        () => ({\n\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                            .toLowerCase()\n                            .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        []\n    )\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const { getTableProps, headerGroups, rows, prepareRow, state } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n        },\n        useFilters // useFilters!\n    )\n\n    // We don't want to render all of the rows for this example, so cap\n    // it for this use case\n\n    return (\n        <>\n            <br />\n            <div>Total of : {rows.length} result found for your search.</div>\n            <br />\n\n            <div>\n            </div>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {rows.map(\n                        (row, i) =>\n                            prepareRow(row) || (\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                        )\n                                    })}\n                                </tr>\n                            )\n                    )}\n                </tbody>\n            </table>\n\n        </>\n    )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n\n    return rows.filter(row => {\n        const rowValue = row.values[id]\n        return rowValue >= filterValue\n    })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\nfunction App({ data }) {\n    const columns = [\n        {\n            Header: 'נתוני משכנתא - לפי הון עצמי',\n            columns: [\n                {\n                    Header: '25%',\n                    accessor: 'st1',\n                },\n                {\n                    Header: '30%',\n                    accessor: 'st2',\n                }\n\n            ],\n        },\n        {\n\n\n            Header: 'Info',\n            columns: [\n                {\n                    Header: 'price',\n                    accessor: 'price',\n                    Filter:NumberRangeColumnFilter,\n                    filter: 'between',\n\n                },\n                {\n                    Header: 'discription',\n                    accessor: 'discription',\n                    filter: 'fuzzyText'\n\n                },\n                {\n                    Header: 'rooms',\n                    accessor: 'rooms',\n                    filter: 'equals',\n\n                },\n                {\n                    Header: 'number',\n                    accessor: 'number',\n                    Cell: row => {\n                        let rowParts = row.cell.value.split(\"**\")\n                        return (\n                            <a href={rowParts[1]} target=\"_blank\" >{rowParts[0]}</a>)\n                    }\n                },\n                {\n                    Header: 'floor',\n                    accessor: 'floor',\n                    filter: 'equals',\n\n                },\n                {\n                    Header: 'building',\n                    accessor: 'building',\n                    filter: 'equals',\n\n                },\n                {\n                    Header: 'yard',\n                    accessor: 'yard',\n                    filter: 'equals',\n\n                },\n            ],\n        },\n    ]\n    return (\n        <Styles>\n            <Table columns={columns} data={data} />\n        </Styles>\n    )\n}\n\nexport default App","import React, { Component ,useState } from 'react'\n\nexport default class MorgageData extends Component {\n\n\n   constructor(props){\n       super(props)\n       this.state={\n           years:25,\n           rate:0.0416\n       }\n   }\n   handleChange = value => this.setState(value)\n\n    render() {\n        const {changeData} =this.props\n        const {years,rate}=this.state\n        return (\n            <div>\n                rate:<input value={rate} onChange ={(event)=>this.handleChange({rate:event.target.value})}/>\n                years:<input value={years} onChange ={(event)=>this.handleChange({years:event.target.value})}/>\n                <button type=\"button\" onClick={()=>changeData({years:years,rate:rate})}>Click Me!</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport style from './style.scss'\nimport FilterTable from './../FilterTable'\nimport MorgageData from './../MorgageData'\nimport migrash from './../../images/migrash.png'\n\n\nexport default class DataContainer extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            types: [],\n            data: [],\n            years: 25,\n            rate: 0.0416\n\n        }\n    }\n\n\n\n    componentDidMount() {\n\n\n        fetch(\"/%D7%AA%D7%9B%D7%A0%D7%99%D7%95%D7%AA-%D7%93%D7%99%D7%A8%D7%94/?json\",\n            {\n                headers: {\n                    'content-type': 'application/json',\n                }, 'method': 'POST', 'mode': 'cors',\n            }).then((response) => {\n                return response.text();\n            }).then((data) => {\n                this.setState({\n                    \"data\": JSON.parse(data)[0],\n                    \"types\": JSON.parse(data)[4]\n                })\n            });\n    }\n    changeProp = (obj) => { this.setState(obj) }\n\n    avgReturn = (needToTake) => {\n        // 0.04 rate per year\n        // 12 payments per year (each mounth)\n        const ir = this.state.rate / 12\n        const np = this.state.years * 12\n        const pv = needToTake\n        return this.PMT(ir, np, pv).toFixed(2) * -1\n    }\n\n    PMT = (ir, np, pv, fv, type) => {\n        /*\n         * ir   - interest rate per month\n         * np   - number of periods (months)\n         * pv   - present value\n         * fv   - future value\n         * type - when the payments are due:\n         *        0: end of the period, e.g. end of month (default)\n         *        1: beginning of period\n         */\n        var pmt, pvif;\n\n        fv || (fv = 0);\n        type || (type = 0);\n\n        if (ir === 0)\n            return -(pv + fv) / np;\n\n        pvif = Math.pow(1 + ir, np);\n        pmt = - ir * pv * (pvif + fv) / (pvif - 1);\n\n        if (type === 1)\n            pmt /= (1 + ir);\n\n        return pmt;\n    }\n    morgageSummary = (price, precent) => {\n        const needToBring = parseInt(price * precent) //הון עצמי\n        const needToTake = price - needToBring  //משכנתא\n        const returnPerMounth = this.avgReturn(needToTake)\n        return `\n        ${this.numberWithCommas(needToBring)} חסכונות \\\n        משכנתא ${this.numberWithCommas(needToTake)}  \\\n        החזר חודשי ${returnPerMounth}   \\\n        ריבית ${(returnPerMounth * 12 * this.state.years - needToTake).toFixed()}  \\\n        ${(returnPerMounth * 12 * this.state.years + needToBring).toFixed()} מחיר סופי  \\\n        `\n\n    }\n\n    numberWithCommas = (x) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    prapareData = (apartments, yard, building) => {\n        let result = []\n        const types = this.state.types.typesArray\n\n        apartments.forEach(element => {\n            \n            const { aptype, floor, free_text, price, rooms, availble,sub_title } = element\n            if (price > 0 && !availble) {\n                debugger\n                const  myURI = types.filter(v=>v.type===aptype)[0].file\n                result.push({ \"price\": price, st1: this.morgageSummary(price, 0.25), st2: this.morgageSummary(price, 0.30), floor: floor, \"discription\": free_text, \"rooms\": rooms, \"number\": `${sub_title} - [${aptype}]**${myURI}`, \"building\": building, \"yard\": yard })\n            }\n        });\n        return result\n\n    }\n    render() {\n        const data = this.state.data\n        if (data.length < 1) return <div></div>\n        let result = []\n        data.forEach(e => {\n            const { building, region_name } = e\n            building.forEach(b => {\n                const { apartments, b_title } = b\n                const formated = this.prapareData(apartments, region_name, b_title)\n                formated.forEach(r => {\n                    result.push(r)\n                })\n            })\n\n        })\n\n        console.log(data)\n        return (\n            <div>\n                <div className=\"main-container\">\n                    <MorgageData changeData={this.changeProp} />\n                    <FilterTable data={result} />\n\n                </div>\n                <img src={migrash} alt=\"Logo\" height=\"600px\" width=\"1200px\" />;\n\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport DataContainer from './components/DataContainer'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataContainer></DataContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.logw(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}